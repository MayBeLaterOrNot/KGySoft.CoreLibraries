Legend:
! Breaking change
* Compatible change
- Bugfix
+ New feature
===============================================================================

~~~~~~~~~
! v5.1.0:
~~~~~~~~~

! KGySoft.CoreLibraries namespace:
==================================
! Files class:
   - GetExecutingPath method: result is fixed for .NET Core 2.0.
   + New CreateWithPath and TryCreateWithPath methods
   ! CanCreate is now obsolete in favor of TryCreateWithPath.

! KGySoft.ComponentModel namespace:
==========================================
! IPersistableObject interface:
  ! TryGetPropertyValue does not throw an InvalidOperationException anymore if CanGetProperty returns false.
    In such case TryGetPropertyValue returns false.
  + New CanGetProperty and CanSetProperty methods: they expose the protected ObservableObjectBase.CanGetProperty and
    CanSetProperty methods via the PersistableObjectBase implementation
* Adding [Serializable] attribute to ObservableObjectBase and its derived types
- ObservableObjectBase.CanGetProperty and CanSetProperty methods:
  - The default implementations recognize also private properties of base classes (they can use Get/Set methods).
  - If a class had overloaded indexers, then an exception was thrown. Now the type of the firstly defined indexer
    of the most derived class is considered. If there indexers with different return types are set by the Set
    method, then you need to override the CanSetProperty method.
    no overloads). To allow using Get/Set from indexers override the CanGetProperty and CanSetProperty methods.
  - If a derived class had non-overridden properties of the same name as the base class, then an exception was
    thrown. Now the most derived property is considered. If you want to set a property of the same name but
    different type in the base class you need to override the CanSetProperty method.
  * Improving performance of Get/Set methods
* Commands:
  * ICommandBinding.AddSource now supports also non-public events
  - Command.CreatePropertyBinding (and CommandBindingsCollection.AddPropertyBinding) works also for simple target
    properties on IPersistableObjectBase targets.

! KGySoft.Serialization.Binary namespace:
==========================================
! BinarySerializationFormatter class:
  - Allowing an IObjectReference to return null if there are no circular references to itself.
  ! Serialization stream has been changed for non-natively supported object graphs (the stream is not compatible
    with previous versions)


~~~~~~~~~
- v5.0.1:
~~~~~~~~~

- KGySoft.CoreLibraries namespace:
==================================
- Enum<TEnum> class: An exception could come from IsDefined(long/ulong) and GetName(long/ulong) methods if
  if no other members were called previously with the same enum type.
 

~~~~~~~~~
! v5.0.0:
~~~~~~~~~

+ Assembly changes:
===================
+ Targeting also .NET Framework 4.7.2.
+ Targeting also .NET Core 2.0.
+ Targeting also .NET Core 3.0.
+ Targeting also .NET Standard 2.0 (some Reflection APIs throw PlatformNotSupportedException - see the documentation).
+ Targeting also .NET Standard 2.1.

! KGySoft namespace:
====================
! PublicResources Class:
  ! ICollectionNongenericValueTypeInvalid method has been renamed to ICollectionNonGenericValueTypeInvalid
  ! IDictionaryNongenericKeyTypeInvalid method has been renamed to IDictionaryNonGenericKeyTypeInvalid

! KGySoft.Collections namespace:
================================
! Cache<TKey, TValue> class:
  + New constructor for initializing from IDictionary<TKey, TValue>
  ! The non-generic IDictionary.this[object] indexer returns null instead of throwing an ArgumentException if type
    of the indexer argument is not compatible with TKey (this is how Dictionary<TKey, TValue> also works).
! CircularSortedList<TKey, TValue> class:
  ! The non-generic IDictionary.this[object] indexer returns null instead of throwing an ArgumentException if type
    of the indexer argument is not compatible with TKey (this is how SortedList<TKey, TValue> also works).

! KGySoft.CoreLibraries namespace:
==================================
+ New TypeNameKind enum: For the TypeExtensions.GetName method.
! DictionaryExtensions class:
  ! GetValueOrDefault<TKey, TValue, TActualValue>: Caused a functional conflict in .NET Core so this method has been
    renamed to GetActualValueOrDefault. For compatibility reasons the overload for string-object dictionaries
	has not been renamed.
  + In .NET 3.5, 4.0 and 4.5 a new GetValueOrDefault<TKey, TValue> overload has been added with the same functionality
    as .NET Core has. Actually this functionality was provided by the old GetValueOrDefault<TKey, TValue, TActualValue>
	overload when TValue and TActualValue were the same.
  + New GetValueOrDefault overloads for IEnumerable<KeyValuePair<TKey, Tvalue>> instances to support also read-only
    dictionaries. The parameter type is not IReadOnlyDictionary<TKey, TValue> because that would cause ambiguity due
	to the interface inheritance of .NET. In case of non-dictionary instances a sequential search is performed.
  + New GetValueOrDefault overloads with Func<TValue> default value factory. These are useful if the default value
    should be evaluated only if the key does not exist in the dictionary.
+ Enum<TEnum> class:
  + New GetFlagsMask method: Similar to GetFlags methods but returns all flags in a single value.
  + New GetFlagsCount methods.
  + New ToString overload (only for performance optimization, there is no any feature change).
  * Reducing heap usage and improving performance in all platform targets.
- EnumerableExtensions class: Fixing non-generic TryAddRange/TryInsertRange/TryRemoveRange/TryReplaceRange if they
  are called multiple times with generic collections of different generic argument types.
+ ObjectExtensions class:
  + The DeepClone<T> method now has an optional ignoreCustomSerialization parameter, which allows cloning even if
    the ISerializable members throw exceptions (eg. PlatformNotSupportedException in .NET Core).
  + New In overload with ReadOnlySpan (only in .NET Core 3.0 and .NET Standard 2.1)
+ RandomExtensions class:
  + New NextString overloads
  + New NextChars methods to fill up or return a char buffer instead of returning a string instance
  * Reducing heap usage and improving performance in all platform targets.
+ EnumExtensions class:
  + New GetFlagsCount method
! TypeExtensions class:
  ! IsGenericTypeOf method returns false if the type to check is not a constructed generic type (it returned true
    if the type and genericTypeDefinition parameters were the same generic type definition instance).
  + New GetName extension methods for formatting type names in a more consistent way than Type members.
+ Range<T> struct:
  + New Deconstruct method.
  + New operators for converting from T, (T, T). Not available in .NET 3.5, .NET 4.0 and .NET 4.5 versions.
+ ThreadSafeRandom class:
  + New NextBytes overload for Span<char> (only in .NET Core 3.0 and .NET Standard 2.1)

- KGySoft.Diagnostics namespace:
================================
- Profiler: Handling possible SecurityException from a partially trusted domain when determining executing directory.

! KGySoft.Reflection namespace:
===============================
+ New types:
  + ResolveAssemblyOptions enum
  + New ResolveTypeOptions enum
! Reflector class:
  ! ResolveAssembly(string,bool,bool) method:
    ! This method is now obsolete in favor of the new overloads.
    ! Earlier the method returned null if the assembly could not be resolved and tryToLoad was false, and
      threw an exception on load errors. From now on this overload returns always null if the assembly
      cannot be resolved. Use the other overloads with ResolveAssemblyOptions.ThrowError flag to throw a
      ReflectionException on resolve errors.
  + New ResolveAssembly(string,ResolveAssemblyOptions) method
  + New ResolveAssembly(AssemblyName,ResolveAssemblyOptions) method
  ! ResolveType(string,bool,bool) method:
    ! This method is now obsolete in favor of the new overloads.
    ! The bool parameters have been renamed to reflect the current behavior better. The default values have
      been adjusted to provide a better compatibility with the former behavior.
    ! Earlier the method could return null or throw an exception depending on the nature of the resolving error.
      From now on the result is always null if the type cannot be resolved. Use the other overloads with
      ResolveTypeOptions.ThrowError flag to throw a ReflectionException on resolving errors.
  ! ResolveType(Assembly,string) method:
    + A new optional ResolveTypeOptions parameter have been added.
    ! Earlier the method could return null or throw an exception depending on the nature of the resolving error.
      From now on if the type cannot be resolved the result is always null if the options parameter does not contain
      the ResolveTypeOptions.ThrowError flag (default behavior), or throws a ReflectionException if the options
      parameter contains the ResolveTypeOptions.ThrowError flag.
  + New ResolveType(string,ResolveTypeOptions) method. New main features:
    + It can be controlled whether an exception should be thrown if type cannot be resolved.
    + It can be controlled whether to use case insensitive resolving.
    + Generic parameters and open constructed generics are supported if they were dumped by TypeExtensions.GetName.
    + More consistent behavior for partial assembly matching.
  - [Try]InvokeMethod overloads by method name: Considering the methods also in the object class.

* KGySoft.Resources namespace:
==============================
- ResXResourceManager: Handling possible SecurityException from a partially trusted domain when determining
  executing directory.
+ ResXResourceReader/ResXResourceWriter: Supporting every RuntimeType instance natively.

+ KGySoft.Security.Cryptography namespace
=========================================
+ SecureRandom class:
  + New NextBytes overload for Span<char> (only in .NET Core 3.0 and .NET Standard 2.1)

! KGySoft.Serialization namespace:
==================================
! Has been split to KGySoft.Serialization.Binary and KGySoft.Serialization.Xml namespaces.

! KGySoft.Serialization.Binary namespace:
=========================================
+ New types:
  + CustomSerializerSurrogateSelector class: Makes possible to customize the serialization and deserialization
    process both with the original BinaryFormatter and KGy SOFT BinarySerializationFormatter. Can be useful for
    serializing non-serializable types or deserializing changed types even across different platforms, eg.
    .NET Framework and .NET Core.
  + ISerializationBinder interface: Contains the same members as the SerializationBinder class in .NET 4.0 and
    later and allows for BinarySerializationFormatter to use the BindToName method in .NET 3.5 as well.
  + ForwardedTypesSerializationBinder class: Allows to define mappings for legacy assembly identities as well as
    using writing the legacy identity of a forwarded type. This makes possible to use the .NET Framework assembly
    identities even in .NET Core and .NET Standard, for example.
  + CustomSerializationBinder class: Provides delegate callback properties to customize Type-name binding.
  + SerializationInfoExtensions class: Extension methods for manipulating a SerializationInfo instance.
  + ISerializationBinder interface.
  + SerializingEventArgs class.
  + DeserializingEventArgs class.
  + GettingFieldEventArgs class.
  + SettingFieldEventArgs class.
  + ObjectDataObtainedEventArgs class.
  + ObjectDataRestoredEventArgs class.
! BinarySerializationFormatter:
  ! The serialized stream is more compact than before (also meaning, not compatible with previous versions)
  ! The SerializationBinder that is set in the Binder property is not called for constructed generic types and
    natively supported types anymore. Instead, it is called for the generic type definition and the element types
    separately. To call the binder for supported non-primitive types the ForceRecursiveSerializationOfSupportedTypes
    flag can be enabled in the options.
  + Supporting runtime types natively. It was required for .NET Core/Standard that cannot serialize Type instances.
  + Supporting serialization of pointer fields.
  + Supporting ISerializationSurrogate instances, which replace the deserialized object as long as they do not
    prevent resolving circular references.
  ! Considering the TypeForwardedFromAttribute attributes of types on serialization, unless the
    IgnoreTypeForwardedFromAttribute flag is enabled.
  * Improving performance.
  - Some edge case issues have been fixed:
    - If different custom serialized types set the same type by string in SerializationInfo using different names,
      which were resolved to the same type, then the deserialization failed.
    - If non-sealed nested collections were serialized where the base type of an inner collection was a natively
      supported one, and an inner collection element had a derived collection type, then the actual collection type
      was ignored and the deserialized inner collection had the base element type.
    - Resolvable circular references to IObjectReference instances were not handled for natively supported collection
      elements.
! IBinarySerializable interface:
  ! The options parameter of the special constructor and the Deserialize methods get the options of the
    deserialization rather than the original one used for the serialization. If that info is needed you need to save
    it into the custom serialized data.
+ AnyObjectSerializerWrapper class:
  + New optional forceSerializationByFields parameter in constructor.
+ BinarySerializationOptions:
  + New ForceRecursiveSerializationOfSupportedTypes flag.
  + New IgnoreTypeForwardedFromAttribute flag.
+ BinarySerializer: Adding optional BinarySerializationOptions parameter to deserialization methods.
* WeakAssemblySerializationBinder:
  + Implements ISerializationBinder.
  + The OmitAssemblyNameOnSerialize property is available also in .NET 3.5. A BinaryFormatter still ignores this
    property in .NET 3.5 (though it does not affect functionality) but BinarySerializationFormatter is now able
    to use that in all .NET versions.
  + New IgnoreAssemblyNameOnResolve property: If assembly information is available on deserialization but the
    type cannot be resolved from that assembly, then this property allows to resolve the type from any loaded
    assemblies if possible.

! KGySoft.Serialization.Xml namespace:
======================================
! XmlSerializer:
  - Fixing array type names when XmlSerializationOptions.FullyQualifiedNames is set.
  + Supporting every RuntimeType instance natively.
  ! Considering the TypeForwardedFromAttribute attributes of types on serialization, unless the
    IgnoreTypeForwardedFromAttribute flag is enabled.
+ XmlSerializationOptions:
  + New IgnoreTypeForwardedFromAttribute flag.


~~~~~~~~~
! v4.7.0:
~~~~~~~~~

+ KGySoft namespace:
====================
+ PublicResources class: Some new resources.

- KGySoft.CoreLibraries namespace:
==================================
- StreamExtensions.ToArray: Fixing an edge case-scenario

+ KGySoft.Collections.ObjectModel namespace:
============================================
+ FastLookupCollection<T>: New OnMapRebuilt virtual method so derived classes can react to detected inconsistencies.

! KGySoft.ComponentModel namespace:
===================================
! CommandBindingsCollection:
  ! It is now derived from FastLookupCollection<T> instead of Collection<T>
  - Disposed bindings cannot be added to the collection.
  + Add: The source can be a Type for static events.
* Command:
  - CreatePropertyBinding: The underlying command was disposed incorrectly.
  + CreateBinding: The source can be a Type for static events.
+ ICommandBinding:
  + AddSource: The source can be a Type for static events.
  + New IsDisposed property.
! FastBindingList<T>:
  ! SetItem: Invoking ListChange event with ListChangedType.ItemChanged even if setting the same instance again (compatibility with BindingList<T>).
  - SetItem: Fixing consistency check so inner map is now not rebuilt that often.
  - Property changes of elements were not tracked in a deserialized instance.
  + If CheckConsistency is true, then subscription of element property changes can be initialized even for elements added directly
    to the wrapped collection when they are accessed.
  - Fixing consistency check in SetItem
! SortableBindingList<T>:
  ! SetItem: Invoking ListChange event with ListChangedType.ItemChanged even if setting the same instance again (compatibility with BindingList<T>).
  - SetItem: Fixing consistency check so inner map is now not rebuilt that often.

! KGySoft.Resources namespace:
==============================
* ResXDataNode:
  - Base path to a file reference is not lost even if raw XML data is cleaned up
  + Implements ICloneable
+ IExpandoResourceSet: New CloneValues property
+ ResXResourceSet: New CloneValues property
+ IExpandoResourceManager:
  + New CloneValues property
  + New GetStream method
! ResXResourceManager:
  + New CloneValues property
  ! To be compatible with ResourceManager the default value of CloneValues is true, so Get[Meta]Object and Get[Meta]Enumerator will return a copy
    of the stored objects by default. For compatibility with earlier behavior set CloneValues to false.
  ! New GetStream methods: Since in the base ResourceManager these methods are not overridable these are newly defined methods.
    Unlike the base methods, these have MemoryStream return type (instead of UnmanagedMemoryStream).
! HybridResourceManager:
  ! If SafeMode is true the GetString methods do not throw an InvalidOperationException even if the result is from a compiled resource.
  + New CloneValues property
  ! To be compatible with ResourceManager the default value of CloneValues is true, so Get[Meta]Object and Get[Meta]Enumerator will return a copy
    of the stored objects by default. For compatibility with earlier behavior set CloneValues to false.
  ! New GetStream methods: Since in the base ResourceManager these methods are not overridable these are newly defined methods.
    Unlike the base methods, these have MemoryStream return type (instead of UnmanagedMemoryStream).

~~~~~~~~~
* v4.6.2:
~~~~~~~~~

* KGySoft.CoreLibraries namespace:
==================================
+ ObjectExtensions.[Try]Convert methods: New pre-registered conversions to use long/ulong as intermediate steps if possible.
+ GenerateObjectSettings: New MaxRecursionLevel property.
* RandomExtensions.NextObject:
  - Avoiding SecurityException better from partially trusted domain
  + Collections for read-only properties can be generated in more cases
+ ThreadSafeRandom class: Adding a new static Instance property.

* KGySoft.ComponentModel namespace:
===================================
+ ICommandBinding:
  + New Executing and Executed events
  + New Sources, Targets and StateUpdaters properties
  * AddStateUpdater method: new optional parameter
  + New InvokeCommand method

- KGySoft.Diagnostic namespace:
===============================
- PerformanceTestBase: Avoiding SecurityException from partially trusted domain if possible

* KGySoft.Reflection namespace:
===============================
* Changing default strategy for ReflectionWays.Auto in some CreateInstance overload
- Reflector class: Fixing value test compatibility in TrySetProperty overloads
- MemberAccessor classes: Detecting security settings conflict and providing a more informative message for the caught VerificationException.

- KGySoft.Serialization namespace:
==================================
- BinarySerializationFormatter: Avoiding SecurityException from a partially trusted domain if possible
- XmlSerializer: Fixing serialization visibility inheritance of properties

~~~~~~~~~
* v4.6.1:
~~~~~~~~~
- Assembly: Resetting SecurityRuleSet.Level1 because otherwise types that implement ISerializable
  cannot be even instantiated from a partially trusted domain.
  See also: See also https://stackoverflow.com/questions/48355591/how-can-i-implement-iserializable-in-net-4-without-violating-inheritance-secur

- KGySoft.CoreLibraries namespace:
==================================
- EnumComparer<TEnum>: It is an abstract class now and uses different implementations for fully and partially trusted domains
  to avoid System.Security.VerificationException for emitted IL code.
- RandomExtensions.NextDecimal: Fixing overflow exception for an edge case.

* KGySoft.Collections namespace:
================================
* Cache<TKey, TValue>:
  * Instead of wrapping a Dictionary with a CacheItem reference type, now implements hashing directly where keys and values
    are stored in value type entries for better performance and smaller memory consumption.
  + A new constructor overload.
  * Not a sealed class anymore. Similarly to Dictionary<TKey, TValue>, only serialization-related members are virtual.
  + New protected GetObjectData and OnDeserialization methods.
  + DisposeDroppedValues property: If an item is removed from the cache internally (or a concurrently loaded item is discarded
    by an IThreadSafeCacheAccessor) and the item is IDisposable, then it can be disposed if this property is true.

+ KGySoft.Diagnostics namespace:
================================
+ PerformanceTestBase<TDelegate, TResult>: New OnBeforeCase and OnAfterCase protected methods.

~~~~~~~~~
! v4.6.0:
~~~~~~~~~

! Assembly: Applying SecurityRuleSet.Level2 and adjusting security critical calls in the whole assembly.
  This is a breaking change for .NET4.0 and above only if the caller assembly is partially trusted or is
  security transparent and tries to call the few of the public methods, which are security critical.

+ KGySoft namespace:
==================================
+ PublicResources class: Provides localizable public string resources that can be used in any project.

* KGySoft.CoreLibraries namespace:
==================================
* Enum<TEnum>: Improving performance of parsing with insensitive case

* KGySoft.Reflection namespace:
===============================
* Reflector class: Improving the performance of invoke by name if there are no multiple members of the same name.

~~~~~~~~~
* v4.5.1:
~~~~~~~~~
Adjusting security settings.

~~~~~~~~~
! v4.5.0:
~~~~~~~~~

! KGySoft.CoreLibraries namespace:
==================================
! Moved here from the KGySoft.Libraries namespace
+ New DateTimeExtensions class
  + AsUtc method
+ New DictionaryExtensions class
  + GetValueOrDefault methods
+ New WaitHandleExtensions class (only in .NET 4.5 and above)
  + WaitOneAsync methods
+ New CharExtensions class
  + IsNonCharacter method
  + IsValidCharacter method
! StringComparerExtensions class: removed (moved to StringExtensions)
! StringExtensions class:
  ! GetTokenValue methods are removed
  + ToEnum method
  + EqualsAny/IndexOfAny/ContainsAny overloads
* EnumerableExtensions class
  + TryAdd/TryClear/TryInsert/TryRemove/TryRemoveAt/TrySetElementAt/TryGetElementAt methods
  + TryAddRange/TryInsertRange/TryRemoveRange/TryReplaceRange methods
  + New overloads for IndexOf methods
  + New Shuffle overload: can be used with an already existing Random instance.
  + New GetRandomElement methods
+ New RandomExtensions class
  + ... TODO
+ TypeExtensions class
  + IsDelegate method
  + IsGenericTypeOf method
  + IsImplementationOfGenericType methods

! KGySoft.Collections namespace:
================================
! Moved here from the KGySoft.Libraries.Collections namespace

! KGySoft.Diagnostics namespace:
================================
! Moved here from the KGySoft.Libraries.Diagnostics namespace
+ PerformanceTest classes (actually moved to the libraries from the PerformanceTest project)

* KGySoft.ComponentModel namespace:
===================================
+ New type converter: BinaryTypeConverter: A TypeConverter that can convert any type to byte[] or string.
- FlagsEnumConverter fix: Now works for all enum types of any underlying type.
+ Interfaces and base classes for business objects and ViewModel classes:
  + IPersistableObject
  + ObservableObjectBase
  + PersistableObjectBase
  + UndoableObjectBase
  + EditableObjectBase
  + ValidatingObjectBase
  + ModelBase

! KGySoft.Libraries namespace:
==============================

! Crc32 class: Moved to the KGySoft.Security.Cryptography namespace
! Unicode class: Removed
! KGySoft.Libraries.Collections namespace: Moved to the KGySoft.Collections namespace
! KGySoft.Libraries.Diagnostics namespace: Moved to the KGySoft.Diagnostics namespace
! KGySoft.Libraries.Reflection namespace: Moved to the KGySoft.Reflection namespace
! KGySoft.Libraries.Serialization namespace: Moved to the KGySoft.Serialization namespace

* KGySoft.Serialization namespace:
==================================
! Moved here from the KGySoft.Libraries.Serialization namespace
! XmlSerializer:
  ! XmlSerializationOptions change: 
    ! Obsolete flag ForcedSerializationValueTypesAsFallback removed.
    ! BinarySerializationAsFallback is applied also for root-level collections
    * None option allows to serialize some trusted collection types and object with only public properties and fields.
    + New flag: ExcludeFields - to serialize public properties only.
    + New flag: ForcedSerializationOfReadOnlyMembersAndCollections - to serialize read-only properties and fields even if they are not
      mutable collections or IXmlSerializable instances. Enabling this flag can be used for one-way serialization only (eg. for logs),
      because it is high likely that the object will not be able to be deserialized.
  + Escaping is possible even if a value is converted by a TypeConverter
  + Creates instances internally so there is no locking when used parallelly
  + Supporting read-only collections with initializer constructor
  + Supporting public fields (can be disabled by ExcludeFields option)
  + Supporting objects without default constructor, if they are fields or properties of a parent object,
    which are not null after creating the parent.
  + Supporting types with conflicting member names (non-virtual redefined members in derived classes).

! KGySoft.Reflection namespace:
================================
! Moved here from the KGySoft.Libraries.Reflection namespace
! MethodInvoker has been renamed to MethodAccessor
! ObjectFactory has been renamed to CreateInstanceAccessor
+ Reflector: Try... methods

+ KGySoft.Resources namespace:
========================================
+ ResXDataNode: Like System.Resources.ResXDataNode with more functionality. Makes possible to obtain every information
  of the raw XML data before serializing.
  Compatible with the System.Resources version without referencing the System.Windows.Forms.dll
+ ResXFileRef class: Like System.Resources.ResXFileRef with some improvements.
  Compatible with the System.Resources version without referencing the System.Windows.Forms.dll
+ ResXResourceReader: Like System.Resources.ResXResourceReader with several improvements.
+ ResXResourceWriter: Like System.Resources.ResXResourceWriter with several improvements.
+ ResXResourceSet: Like System.Resources.ResXResourceSet with expansion support.
+ ResXResourceManager: Like System.Resources.ResourceManger but works with .resx files directly and supports expansion.
+ HybridResourceManager: A ResourceManger that works with binary and .resx files and supports expansion.
+ DynamicResourceManager: A HybridResourceManger with auto append and auto save support.

+ KGySoft.Security.Cryptography namespace:
==========================================

! Crc32:
  ! Moved here from the KGySoft.Libraries namespace
  + Lookup tables for different polynomials are now cached.
  + Now uses the slice-by-16 technique for better performance.
+ SecureRandom: A RandomNumberGenerator wrapper for generating cryptographically secure random numbers, which is compatible with the
  Random class, so all of the extensions in the RandomExtensions can be used also for the SecureRandom class.
