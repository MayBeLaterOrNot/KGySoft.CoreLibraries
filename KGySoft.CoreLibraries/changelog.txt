Legend:
! Breaking change
* Compatible change
- Bugfix
+ New feature
===============================================================================

~~~~~~~~~
! v5.0.0:
~~~~~~~~~

+ Assembly changes:
===================
+ Supporting .NET Core 2.0.

! KGySoft namespace
===================
! PublicResources Class:
  ! ICollectionNongenericValueTypeInvalid method has been renamed to ICollectionNonGenericValueTypeInvalid
  ! IDictionaryNongenericKeyTypeInvalid method has been renamed to IDictionaryNonGenericKeyTypeInvalid

! KGySoft.CoreLibraries namespace:
==================================
! DictionaryExtensions class:
  ! GetValueOrDefault<TKey, TValue, TActualValue>: Caused a functional conflict in .NET Core so this method has been
    renamed to GetActualValueOrDefault. For compatibility reasons the overload for string-object dictionaries
	has not been renamed.
  + In .NET 3.5, 4.0 and 4.5 a new GetValueOrDefault<TKey, TValue> overload has been added with the same functionality
    as .NET Core has. Actually this functionality was provided by the old GetValueOrDefault<TKey, TValue, TActualValue>
	overload when TValue and TActualValue were the same.
  + New GetValueOrDefault overloads for IEnumerable<KeyValuePair<TKey, Tvalue>> instances to support also read-only
    dictionaries. The parameter type is not IReadOnlyDictionary<TKey, TValue> because that would cause ambiguity due
	to the current interface inheritance. In case of non-dictionary instances a sequential search is performed.
+ Range<T> struct:
  + New Deconstruct method.
  + New operators for converting from T, (T, T). Not available in .NET 3.5, .NET 4.0 and .NET 4.5 versions.

- KGySoft.Diagnostics namespace:
================================
- Profiler: Handling possible SecurityException from a partially trusted domain when determining executing directory

- KGySoft.Resources namespace:
==============================
- ResXResourceManager: Handling possible SecurityException from a partially trusted domain when determining executing directory

! KGySoft.Serialization namespace:
==============================
! BinarySerializationFormatter:
  ! The serialized stream is more compact than before (also meaning, not compatible with previous versions)
  + Supporting runtime types natively. It was required for .NET Core, which cannot serialize Type instances.
  * Improving performance.
! IBinarySerializable interface (behavioral change for implementations):
  ! The options parameter of the special constructor and the Deserialize methods get the options of the deserialization
    rather than the original one used for the serialization. If that info is needed you need to save it into the
	custom serialized data.
+ BinarySerializationOptions: New ForceRecursiveSerializationOfSupportedTypes flag.
+ BinarySerializer: Adding optional BinarySerializationOptions parameter to deserialization methods.
- XmlSerializer: Fixing array type names when XmlSerializationOptions.FullyQualifiedNames is set.


~~~~~~~~~
! v4.7.0:
~~~~~~~~~

+ KGySoft namespace:
====================
+ PublicResources class: Some new resources.

- KGySoft.CoreLibraries namespace:
==================================
- StreamExtensions.ToArray: Fixing an edge case-scenario

+ KGySoft.Collections.ObjectModel namespace:
============================================
+ FastLookupCollection<T>: New OnMapRebuilt virtual method so derived classes can react to detected inconsistencies.

! KGySoft.ComponentModel namespace:
===================================
! CommandBindingsCollection:
  ! It is now derived from FastLookupCollection<T> instead of Collection<T>
  - Disposed bindings cannot be added to the collection.
  + Add: The source can be a Type for static events.
* Command:
  - CreatePropertyBinding: The underlying command was disposed incorrectly.
  + CreateBinding: The source can be a Type for static events.
+ ICommandBinding:
  + AddSource: The source can be a Type for static events.
  + New IsDisposed property.
! FastBindingList<T>:
  ! SetItem: Invoking ListChange event with ListChangedType.ItemChanged even if setting the same instance again (compatibility with BindingList<T>).
  - SetItem: Fixing consistency check so inner map is now not rebuilt that often.
  - Property changes of elements were not tracked in a deserialized instance.
  + If CheckConsistency is true, then subscription of element property changes can be initialized even for elements added directly
    to the wrapped collection when they are accessed.
  - Fixing consistency check in SetItem
! SortableBindingList<T>:
  ! SetItem: Invoking ListChange event with ListChangedType.ItemChanged even if setting the same instance again (compatibility with BindingList<T>).
  - SetItem: Fixing consistency check so inner map is now not rebuilt that often.

! KGySoft.Resources namespace:
==============================
* ResXDataNode:
  - Base path to a file reference is not lost even if raw XML data is cleaned up
  + Implements ICloneable
+ IExpandoResourceSet: New CloneValues property
+ ResXResourceSet: New CloneValues property
+ IExpandoResourceManager:
  + New CloneValues property
  + New GetStream method
! ResXResourceManager:
  + New CloneValues property
  ! To be compatible with ResourceManager the default value of CloneValues is true, so Get[Meta]Object and Get[Meta]Enumerator will return a copy
    of the stored objects by default. For compatibility with earlier behavior set CloneValues to false.
  ! New GetStream methods: Since in the base ResourceManager these methods are not overridable these are newly defined methods.
    Unlike the base methods, these have MemoryStream return type (instead of UnmanagedMemoryStream).
! HybridResourceManager:
  ! If SafeMode is true the GetString methods do not throw an InvalidOperationException even if the result is from a compiled resource.
  + New CloneValues property
  ! To be compatible with ResourceManager the default value of CloneValues is true, so Get[Meta]Object and Get[Meta]Enumerator will return a copy
    of the stored objects by default. For compatibility with earlier behavior set CloneValues to false.
  ! New GetStream methods: Since in the base ResourceManager these methods are not overridable these are newly defined methods.
    Unlike the base methods, these have MemoryStream return type (instead of UnmanagedMemoryStream).

~~~~~~~~~
* v4.6.2:
~~~~~~~~~

* KGySoft.CoreLibraries namespace:
==================================
+ ObjectExtensions.[Try]Convert methods: New pre-registered conversions to use long/ulong as intermediate steps if possible.
+ GenerateObjectSettings: New MaxRecursionLevel property.
* RandomExtensions.NextObject:
  - Avoiding SecurityException better from partially trusted domain
  + Collections for read-only properties can be generated in more cases
+ ThreadSafeRandom class: Adding a new static Instance property.

* KGySoft.ComponentModel namespace:
===================================
+ ICommandBinding:
  + New Executing and Executed events
  + New Sources, Targets and StateUpdaters properties
  * AddStateUpdater method: new optional parameter
  + New InvokeCommand method

- KGySoft.Diagnostic namespace:
===============================
- PerformanceTestBase: Avoiding SecurityException from partially trusted domain if possible

* KGySoft.Reflection namespace:
===============================
* Changing default strategy for ReflectionWays.Auto in some CreateInstance overload
- Reflector class: Fixing value test compatibility in TrySetProperty overloads
- MemberAccessor classes: Detecting security settings conflict and providing a more informative message for the caught VerificationException.

- KGySoft.Serialization namespace:
==================================
- BinarySerializationFormatter: Avoiding SecurityException from a partially trusted domain if possible
- XmlSerializer: Fixing serialization visibility inheritance of properties

~~~~~~~~~
* v4.6.1:
~~~~~~~~~
- Assembly: Resetting SecurityRuleSet.Level1 because otherwise types that implement ISerializable
  cannot be even instantiated from a partially trusted domain.
  See also: See also https://stackoverflow.com/questions/48355591/how-can-i-implement-iserializable-in-net-4-without-violating-inheritance-secur

- KGySoft.CoreLibraries namespace:
==================================
- EnumComparer<TEnum>: It is an abstract class now and uses different implementations for fully and partially trusted domains
  to avoid System.Security.VerificationException for emitted IL code.
- RandomExtensions.NextDecimal: Fixing overflow exception for an edge case.

* KGySoft.Collections namespace:
================================
* Cache<TKey, TValue>:
  * Instead of wrapping a Dictionary with a CacheItem reference type, now implements hashing directly where keys and values
    are stored in value type entries for better performance and smaller memory consumption.
  + A new constructor overload.
  * Not a sealed class anymore. Similarly to Dictionary<TKey, TValue>, only serialization-related members are virtual.
  + New protected GetObjectData and OnDeserialization methods.
  + DisposeDroppedValues property: If an item is removed from the cache internally (or a concurrently loaded item is discarded
    by an IThreadSafeCacheAccessor) and the item is IDisposable, then it can be disposed if this property is true.

+ KGySoft.Diagnostics namespace:
================================
+ PerformanceTestBase<TDelegate, TResult>: New OnBeforeCase and OnAfterCase protected methods.

~~~~~~~~~
! v4.6.0:
~~~~~~~~~

! Assembly: Applying SecurityRuleSet.Level2 and adjusting security critical calls in the whole assembly.
  This is a breaking change for .NET4.0 and above only if the caller assembly is partially trusted or is
  security transparent and tries to call the few of the public methods, which are security critical.

+ KGySoft namespace:
==================================
+ PublicResources class: Provides localizable public string resources that can be used in any project.

* KGySoft.CoreLibraries namespace:
==================================
* Enum<TEnum>: Improving performance of parsing with insensitive case

* KGySoft.Reflection namespace:
===============================
* Reflector class: Improving the performance of invoke by name if there are no multiple members of the same name.

~~~~~~~~~
* v4.5.1:
~~~~~~~~~
Adjusting security settings.

~~~~~~~~~
! v4.5.0:
~~~~~~~~~

! KGySoft.CoreLibraries namespace:
==================================
! Moved here from the KGySoft.Libraries namespace
+ New DateTimeExtensions class
  + AsUtc method
+ New DictionaryExtensions class
  + GetValueOrDefault methods
+ New WaitHandleExtensions class (only in .NET 4.5 and above)
  + WaitOneAsync methods
+ New CharExtensions class
  + IsNonCharacter method
  + IsValidCharacter method
! StringComparerExtensions class: removed (moved to StringExtensions)
! StringExtensions class:
  ! GetTokenValue methods are removed
  + ToEnum method
  + EqualsAny/IndexOfAny/ContainsAny overloads
* EnumerableExtensions class
  + TryAdd/TryClear/TryInsert/TryRemove/TryRemoveAt/TrySetElementAt/TryGetElementAt methods
  + TryAddRange/TryInsertRange/TryRemoveRange/TryReplaceRange methods
  + New overloads for IndexOf methods
  + New Shuffle overload: can be used with an already existing Random instance.
  + New GetRandomElement methods
+ New RandomExtensions class
  + ... TODO
+ TypeExtensions class
  + IsDelegate method
  + IsGenericTypeOf method
  + IsImplementationOfGenericType methods

! KGySoft.Collections namespace:
================================
! Moved here from the KGySoft.Libraries.Collections namespace

! KGySoft.Diagnostics namespace:
================================
! Moved here from the KGySoft.Libraries.Diagnostics namespace
+ PerformanceTest classes (actually moved to the libraries from the PerformanceTest project)

* KGySoft.ComponentModel namespace:
===================================
+ New type converter: BinaryTypeConverter: A TypeConverter that can convert any type to byte[] or string.
- FlagsEnumConverter fix: Now works for all enum types of any underlying type.
+ Interfaces and base classes for business objects and ViewModel classes:
  + IPersistableObject
  + ObservableObjectBase
  + PersistableObjectBase
  + UndoableObjectBase
  + EditableObjectBase
  + ValidatingObjectBase
  + ModelBase

! KGySoft.Libraries namespace:
==============================

! Crc32 class: Moved to the KGySoft.Security.Cryptography namespace
! Unicode class: Removed
! KGySoft.Libraries.Collections namespace: Moved to the KGySoft.Collections namespace
! KGySoft.Libraries.Diagnostics namespace: Moved to the KGySoft.Diagnostics namespace
! KGySoft.Libraries.Reflection namespace: Moved to the KGySoft.Reflection namespace
! KGySoft.Libraries.Serialization namespace: Moved to the KGySoft.Serialization namespace

* KGySoft.Serialization namespace:
==================================
! Moved here from the KGySoft.Libraries.Serialization namespace
! XmlSerializer:
  ! XmlSerializationOptions change: 
    ! Obsolete flag ForcedSerializationValueTypesAsFallback removed.
    ! BinarySerializationAsFallback is applied also for root-level collections
    * None option allows to serialize some trusted collection types and object with only public properties and fields.
    + New flag: ExcludeFields - to serialize public properties only.
    + New flag: ForcedSerializationOfReadOnlyMembersAndCollections - to serialize read-only properties and fields even if they are not
      mutable collections or IXmlSerializable instances. Enabling this flag can be used for one-way serialization only (eg. for logs),
      because it is high likely that the object will not be able to be deserialized.
  + Escaping is possible even if a value is converted by a TypeConverter
  + Creates instances internally so there is no locking when used parallelly
  + Supporting read-only collections with initializer constructor
  + Supporting public fields (can be disabled by ExcludeFields option)
  + Supporting objects without default constructor, if they are fields or properties of a parent object,
    which are not null after creating the parent.
  + Supporting types with conflicting member names (non-virtual redefined members in derived classes).

! KGySoft.Reflection namespace:
================================
! Moved here from the KGySoft.Libraries.Reflection namespace
! MethodInvoker has been renamed to MethodAccessor
! ObjectFactory has been renamed to CreateInstanceAccessor
+ Reflector: Try... methods

+ KGySoft.Resources namespace:
========================================
+ ResXDataNode: Like System.Resources.ResXDataNode with more functionality. Makes possible to obtain every information
  of the raw XML data before serializing.
  Compatible with the System.Resources version without referencing the System.Windows.Forms.dll
+ ResXFileRef class: Like System.Resources.ResXFileRef with some improvements.
  Compatible with the System.Resources version without referencing the System.Windows.Forms.dll
+ ResXResourceReader: Like System.Resources.ResXResourceReader with several improvements.
+ ResXResourceWriter: Like System.Resources.ResXResourceWriter with several improvements.
+ ResXResourceSet: Like System.Resources.ResXResourceSet with expansion support.
+ ResXResourceManager: Like System.Resources.ResourceManger but works with .resx files directly and supports expansion.
+ HybridResourceManager: A ResourceManger that works with binary and .resx files and supports expansion.
+ DynamicResourceManager: A HybridResourceManger with auto append and auto save support.

+ KGySoft.Security.Cryptography namespace:
==========================================

! Crc32:
  ! Moved here from the KGySoft.Libraries namespace
  + Lookup tables for different polynomials are now cached.
  + Now uses the slice-by-16 technique for better performance.
+ SecureRandom: A RandomNumberGenerator wrapper for generating cryptographically secure random numbers, which is compatible with the
  Random class, so all of the extensions in the RandomExtensions can be used also for the SecureRandom class.
